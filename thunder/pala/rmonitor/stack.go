package rmonitor

import (
	"bufio"
	"bytes"
	"fmt"
	"io"
	"runtime"
	"strings"

	"golang.org/x/xerrors"
)

// Stack represents the call stack of one goroutine
type Stack struct {
	id        string
	state     string
	lastFunc  string
	functions []string
	stack     string
}

// ID returns the goroutine id in the Golang runtime
// Goroutine 8 [chan receive], id will be "8"
func (s *Stack) ID() string {
	return s.id
}

// Equal checks if stack is equal to other
func (s *Stack) Equal(other Resource) bool {
	otherStack := other.(*Stack)
	if s.id != otherStack.ID() {
		return false
	}
	if s.lastFunc == otherStack.LastFunction() {
		return true
	}

	return otherStack.derivedFrom(s) || s.derivedFrom(otherStack)
}

// If stack A is derived from B, B's last function will exist in A.
func (s *Stack) derivedFrom(other Resource) bool {
	otherStack := other.(*Stack)
	ret := false
	for _, funcName := range s.Functions() {
		if otherStack.LastFunction() == funcName {
			ret = true
			break
		}
	}
	return ret
}

// Dump prints goroutine stack
func (s *Stack) Dump() {
	fmt.Printf("Goroutine %s [%s]\n  function: %v\n  stack: %v\n", s.id, s.state, s.lastFunc, s.stack)
}

// State returns goroutine state string like "running", "sleep", "chan receive"...
// Goroutine 8 [chan receive], state will be "chan receive"
func (s *Stack) State() string {
	return s.state
}

// LastFunction represents the last goroutine function name
func (s *Stack) LastFunction() string {
	return s.lastFunc
}

// Functions returns all called functions within Stack
func (s *Stack) Functions() []string {
	return s.functions
}

// String is for implement stringer interface
func (s *Stack) String() string {
	return s.lastFunc
}

// Stack returns full goroutine stack
func (s *Stack) Stack() string {
	return s.stack
}

func (s *Stack) shouldIgnore() bool {
	switch funcName := s.lastFunc; funcName {
	case "testing.RunTests", "testing.(*T).Run":
		return strings.HasPrefix(s.State(), "chan receive")
	case "runtime.goexit":
		return strings.HasPrefix(s.State(), "syscall")
	case "runtime.gopark":
		// ensureSigM starts one global, sleeping thread to make sure at least
		// one thread is available to catch signals enabled for os/signal.
		// This leak is generated by os/singal automatically.
		for _, function := range s.functions {
			if strings.HasPrefix(function, "runtime.ensureSigM") {
				return true
			}
		}
		return false
	case "os/signal.signal_recv":
		// The signal package automatically starts a goroutine when it's imported.
		return true
	default:
		return false
	}
}

// NewStack parses goroutine stack string list and returns Stack
func NewStack(stack []string) *Stack {
	// Parse `goroutine 31 [chan receive]:\n`
	// id = `31`, status = `chan receive`
	parts := strings.SplitN(strings.TrimSuffix(stack[0], ":\n"), " ", 3)
	id := parts[1]
	state := strings.TrimSuffix(strings.TrimPrefix(parts[2], "["), "]:")

	var functions []string
	for _, line := range stack[1:] {
		if idx := strings.LastIndex(line, "("); idx > 0 {
			// Parse `thunder2/rmonitor.getStackBuffer(0x201, 0x4adba0, 0x0, 0x2)`
			functions = append(functions, line[:idx])
		} else if strings.HasPrefix(line, "created by") {
			// Parse `created by thunder2/consensus.(*networkManager).connect`
			functions = append(functions, strings.SplitN(line, " ", 3)[2])
		}
	}

	return &Stack{
		id:        id,
		state:     state,
		lastFunc:  functions[0],
		functions: functions,
		stack:     strings.Join(stack, "\n"),
	}
}

// GetCurrentStacks gets the stack trace of all goroutines
func GetCurrentStacks() ([]*Stack, error) {
	var stacks []*Stack
	var section []string

	stackBuffer := getStackBuffer(true)

	reader := bufio.NewReader(bytes.NewReader(stackBuffer))
	for {
		line, err := reader.ReadString('\n')
		if err == io.EOF {
			break
		}
		if err != nil {
			return stacks, xerrors.Errorf("read stack failed: %v", err)
		}

		line = strings.TrimSuffix(line, "\n")
		if line == "" && len(section) > 0 {
			stack := NewStack(section)
			if stack != nil && !stack.shouldIgnore() {
				stacks = append(stacks, stack)
			}
			section = []string{}
			continue
		}

		section = append(section, line)
	}

	// Parse last goroutine
	if len(section) > 0 {
		stack := NewStack(section)
		if stack != nil && !stack.shouldIgnore() {
			stacks = append(stacks, stack)
		}
	}

	return stacks, nil
}

func getStackBuffer(all bool) []byte {
	for i := 4096; ; i *= 2 {
		buf := make([]byte, i)
		if n := runtime.Stack(buf, all); n < i {
			return buf
		}
	}
}
