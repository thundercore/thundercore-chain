#!/bin/bash

#--------------------------------------------------------------------
# Global configurations.
#--------------------------------------------------------------------

cd $(dirname $0)
readonly ROOT=$(pwd)
readonly TMP=${TMPDIR:-/tmp}/$(basename $0).tmp.$$

#--------------------------------------------------------------------
# Helper functions.
#--------------------------------------------------------------------

usage()
{
  cat << EOF
usage: $0 [options]

If no option is assigned, run the single-process mode, i.e., run a process
which is the only proposer and the only voter as the same time.

OPTIONS:
-c      Clear data (pala-dev/dataDir/).
-g      Start the single mode from the genesis (i.e., clear data and then start)
-h      Show this message.
-r      Assign the role: proposer | voter | bootnode | fullnode
-d      Specify the relative path of Pala configuration
EOF
}

clean_up()
{
  rm -f $TMP > /dev/null 2>&1
}

# echo colorful texts.
# $1: 0-7, the color code.
# $2 and the rest: the text.
cecho()
{
  color=$1
  shift
  echo -e "\n\033[1;3${color}m$@\033[m"
}

run()
{
  cecho 3 "> Run $@"
  echo
  eval time $@  # Must use eval to process single quote.
}

clear_data()
{
  cecho 6  "> Clear data under "`pwd`"/dataDir"
  rm -rf ./dataDir/
}

main()
{
  role=
  cfgBaseDir=.

  # Parse arguments.
  while getopts "cghr:d:" OPTION
  do
    case $OPTION in
      h)
        usage
        exit 1
        ;;
      g)
        clear_data
        ;;
      c)
        clear_data
        exit 0
        ;;
      r)
        role=$OPTARG
        ;;
      d)
        cfgBaseDir=$cfgBaseDir/$OPTARG
        ;;
      ?)
        usage
        exit 1
        ;;
    esac
  done

  # Keep the rest arguments in $@.
  shift $((OPTIND-1))

  if [ "$role" = "" ]; then
    # Single process mode.
    role="single"
  elif [ "$role" != "proposer" -a "$role" != "voter" -a "$role" != "bootnode" -a "$role" != "fullnode" -a "$role" != "single-test" ]; then
    cecho 1 "Unknown role: $role.\n"
    usage
    exit 1
  fi

  # Main.
  while go run ../../cmd/pala/main.go --configPath $cfgBaseDir/$role --logToConsole --noFdCheck; do
	:
  done
}

#--------------------------------------------------------------------

# Clean up when receiving signals (including Ctrl+C).
trap "clean_up; exit 1" 1 2 3 13 15

main $@

clean_up
exit 0
